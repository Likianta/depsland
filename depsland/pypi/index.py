import atexit
import typing as t

from lk_utils import dumps
from lk_utils import fs
from lk_utils import loads

from ..depsolver import T as T0
from ..normalization import split_filename_of_package
from ..paths import pypi as pypi_paths

_root = pypi_paths.root


class T(T0):
    AbsPath = RelPath = str
    #   relative to `paths.pypi.root`
    Index = t.Dict[
        T0.PackageId,
        t.Tuple[t.Optional[RelPath], t.Optional[RelPath]]
    ]
    #   {package_id: (downloads_path, installs_path), ...}
    Name2Ids = t.Dict[T0.PackageName, t.Set[T0.PackageId]]


class Index:
    _changed: bool
    _index: T.Index
    _name_2_ids: T.Name2Ids
    _stash_downloads: t.Dict[T0.PackageId, T.AbsPath]
    
    def __init__(self):
        self._load_index()
        self._changed = False
        self._stash_downloads = {}
        atexit.register(self.save_index)
    
    def __contains__(self, item: t.Union[T.PackageName, T.PackageId]) -> bool:
        return item in self._name_2_ids or item in self._index
    
    def __getitem__(self, id: T.PackageId) -> t.Tuple[T.AbsPath, T.AbsPath]:
        a, b = self._index[id]
        return f'{_root}/{a}', f'{_root}/{b}'
    
    def _load_index(self) -> None:
        """
        the initial files were generated by `build/self_build.py:init_pypi_index`
        """
        self._index = loads(pypi_paths.index_pkl)
        self._name_2_ids = loads(pypi_paths.name_2_ids)
    
    def add_to_index(self, path: T.AbsPath, type: int) -> None:
        if type == 0:
            name, ver = split_filename_of_package(fs.basename(path))
            self._stash_downloads[f'{name}-{ver}'] = path
        else:
            _, name, ver = path.rsplit('/', 2)
            dl_path = self._stash_downloads.pop(f'{name}-{ver}')
            self.update_index(f'{name}-{ver}', dl_path, path)
    
    def update_index(
        self,
        pkg_id: T.PackageId,
        dl_path: T.AbsPath,
        ins_path: T.AbsPath,
        force: bool = False,
    ) -> None:
        if pkg_id in self._index and not force:
            return
        assert (
            dl_path.lower().startswith(pypi_paths.downloads.lower())
            #   why use `lower`: the `internal_path` was from pip downloading \
            #   process. in windows its case is not stable.
            #   for examples:
            #       'c:\myname\projects\depsland\pypi\...'
            #       'C:\MyName\projects\depsland\pypi\...'
            and fs.isfile(dl_path)
        )
        assert (
            ins_path.startswith(pypi_paths.installed)
            #   we no need to use `lower` here because the `internal_path` was \
            #   generated by `self.get_install_path`, which is stable.
            and fs.isdir(ins_path)
        )
        self._index[pkg_id] = (
            fs.relpath(dl_path, _root),
            fs.relpath(ins_path, _root),
        )
        self._name_2_ids[pkg_id.split('-')[0]].add(pkg_id)
        self._changed = True
    
    def save_index(self) -> None:
        if self._stash_downloads:
            print(self._stash_downloads, ':lv3')
            print(
                'there were {} packages downloaded but not installed'
                .format(len(self._stash_downloads)),
                'you can use `sidework/pypi_index.py:rebuild` to fix the '
                'indexes',
                ':v3'
            )
        if self._changed:
            dumps(self._index, pypi_paths.index_pkl)
            dumps(self._index, pypi_paths.index_json)
            dumps(self._name_2_ids, pypi_paths.name_2_ids)
            print('saved pypi indexes')
        self._changed = False
